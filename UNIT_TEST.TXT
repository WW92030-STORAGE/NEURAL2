void UnitTest() {
    int N_TRAIN = 100000;
    int THRESHOLD = 0.9 * N_TRAIN;
    int confusion[2][2] = {{0, 0}, {0 ,0}};

    // Dimensions
    int N_IN = 3;
    int N_OUT = 1;

    // Declare layers here
    LinearLayer L(3, 4);
    SigmoidLayer S(4);
    LinearLayer L2(4, 4);
    SigmoidLayer S2(4);
    LinearLayer L3(4, 2);
    SigmoidLayer S3(2);
    LayerStack stack(std::vector<Layer*>({&L, &S, &L2, &S2, &L3, &S3}));

    // Training loop on random data
    for (int TRAIN = 0; TRAIN < N_TRAIN; TRAIN++) {
        // Declare the inputs
        std::vector<NN_NUMERIC_T> input = randradvec(N_IN, 1.01549129756);

        // Calculate the expected outputs
        NN_NUMERIC_T distsq = input[0] * input[0] + input[1] * input[1] + input[2] * input[2];
        auto expected = std::vector<NN_NUMERIC_T>({(distsq <= 1) ? 0.99 : 0.01});
        expected.push_back(1.0 - expected[0]);

        // Foward propagate the model
        auto actual = stack(input);

        std::cout << "ITER " << TRAIN << " ";
        std::cout << "INPUTS " << toString(input) << " ";
        std::cout << "EXPECTED " << toString(expected) << " ";
        std::cout << "ACTUAL " << toString(actual) + "\n";

        // Backward propagaate the model
        auto err = sub(actual, expected);
        stack.backward(err);

        if (TRAIN >= THRESHOLD) confusion[actual[0] > actual[1]][expected[0] > expected[1]]++;
    }

    std::cout << "CONFUSION (Rows actual, columns expected)\n";
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) std::cout << confusion[i][j] << " ";
        std::cout << std::endl;
    }
}